paths:
  /auth/login:
    post:
      summary: Login To System
      tags:
        - auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
      responses:
        '201':
          summary: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Data'
        '401':
          description: Unauthorize

  /auth/register:
    post:
      summary: Register To System
      tags:
        - auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                email:
                  type: string
                  format: email
                password:
                  type: string
      responses:
        '201':
          summary: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Data'
        '409':
          description: Conflict

  /auth/refresh-token:
    post:
      summary: Refresh token when access token expire
      tags:
        - auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                refreshToken:
                  type: string
      responses:
        '201':
          summary: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Data'
        '404':
          description: Not Found

  /user/me:
    get:
      summary: Get user profile
      tags:
        - user
      security:
        - bearerAuth: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Data'
        '404':
          description: Not Found

  /user/reset-password:
    patch:
      summary: Reset Password
      tags:
        - user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                codeToVerify:
                  type: number
      responses:
        '200':
          summary: OK
          description: Reset Password Successfully
        '400':
          description: Bad Request
        '404':
          description: Not Found
        '500':
          description: Server Interval

  /user/send-code:
    patch:
      summary: Send Verify Code To Your Email
      tags:
        - user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
      responses:
        '200':
          summary: OK
          description: Send Code Successfully, Check Your Email, Pls
        '400':
          description: Bad Request
        '404':
          description: Not Found
        '500':
          description: Server Interval

  /flashcard:
    get:
      summary: Get All Flashcards
      tags:
        - flashcard
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          required: true
          description: Page Number
          default: 1
        - name: take
          in: query
          required: true
          description: Number Of Items Which You Want To Take
          default: 7
        - name: sortBy
          in: query
          required: true
          description: Sort Column
          default: ''
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Data'
        '400':
          description: Bad Request
        '404':
          description: Not Found
        '500':
          description: Server Interval

    post:
      summary: Create New Flashcard
      tags:
        - flashcard
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                picture:
                  type: string
                topicTitle:
                  type: string
                topicIcon:
                  type: string
                isPublic:
                  type: boolean
                  default: true
      responses:
        '201':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Flashcard'
        '400':
          description: Bad Request
        '404':
          description: Not Found
        '500':
          description: Server Interval

  /flashcard/{id}:
    get:
      summary: Get Detail Flashcard
      tags:
        - flashcard
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Flashcard Id

      responses:
        '201':
          description: Detail Flashcard
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Flashcard'
        '400':
          description: Bad Request
        '404':
          description: Not Found
        '500':
          description: Server Interval

  /flashcard/{id}/word:
    patch:
      summary: Add New Word To Card
      tags:
        - flashcard
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Flashcard Id
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                word:
                  type: string
                  required: true
                type:
                  type: string
                  required: true
                definition:
                  type: string
                  require: true
                pronunciation:
                  type: string
                example:
                  type: string
                picture:
                  type: string
                synonyms:
                  type: array
                  items:
                    type: string,
                    default: 'string'
                antonyms:
                  type: array
                  items:
                    type: string,
                    default: 'string'

      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Flashcard'
        '400':
          description: Bad Request
        '404':
          description: Not Found
        '500':
          description: Server Interval

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    User:
      type: object
      properties:
        _id:
          type: string
        email:
          type: string
          format: email
        name:
          type: string
        avatar:
          type: string
        password:
          type: string
        score:
          type: number
          default: 0
        verifyCode:
          type: object
          properties:
            code:
              type: number
            updatedAt:
              type: Date
    Token:
      type: object
      properties:
        token:
          type: string
        expires:
          type: Date
        type:
          type: string,
          enum: [refresh]
        user:
          type: ObjectId
          $ref: '#/components/schemas/User'
    Flashcard:
      type: object
      properties:
        name:
          type: string
        picture:
          type: string
        words:
          type: array
          items:
            $ref: '#/components/schemas/Word'
    Word:
      type: object
      properties:
        word:
          type: string
        type:
          type: string
        definition:
          type: string
        example:
          type: string
        synonyms:
          type: array
          items:
            type: string 
        antonyms:
          type: array
          items:
            type: string 
        picture:
          type: string
        pronunciation:
          type: string
        topic:
          type: object
          properties:
            title: 
              type: string
            icon:
              type: string
          
    Error:
      type: object
      properties:
        success:
          type: boolean
        statusCode:
          type: number
        message:
          type: string
        stack:
          type: string
    Data:
      type: object
      properties:
        success:
          type: boolean
        statusCode:
          type: number
        data:
          type: object
        message:
          type: string
        pagination:
          tye: string
  # responses:
  #   DuplicateEmail:
  #     description: Email already taken
  #     content:
  #       application/json:
  #         schema:
  #           $ref: '#/components/schemas/Error'
  #         example:
  #           code: 400
  #           message: Email already taken
  #   Unauthorized:
  #     description: Unauthorized
  #     content:
  #       application/json:
  #         schema:
  #           $ref: '#/components/schemas/Error'
  #         example:
  #           code: 401
  #           message: Please authenticate
  #   Forbidden:
  #     description: Forbidden
  #     content:
  #       application/json:
  #         schema:
  #           $ref: '#/components/schemas/Error'
  #         example:
  #           code: 403
  #           message: Forbidden
  #   NotFound:
  #     description: Not found
  #     content:
  #       application/json:
  #         schema:
  #           $ref: '#/components/schemas/Error'
  #         example:
  #           code: 404
  #           message: Not found
